#!/bin/bash

set -e

function print_usage() {
	echo "$(basename $0)"
	echo ""
	echo "usage:"
	echo ""
	echo "$(basename $0) [options]"
	echo ""
	echo "Options:"
	echo " -h                           print this help text"
	echo " -i [basename],[numnodes]     generate/update inventory file"
	echo " -s                           skip host update/upgrade and reboot"
	echo " -w                           wipe all src/build dirs and start fresh"
	echo " -l [src options see below]   libqb"
	echo " -k [src options see below]   kronosnet"
	echo " -c [src options see below]   corosync"
	echo " Source options: (default git, github repos, master branch)"
	echo "    git[,repo[,branch]]       use git. Optionally provide an alternative repo and branch"
	echo "                              brach accepts the same values as defined by:"
	echo "                              http://docs.ansible.com/ansible/git_module.html version option"
	echo "                              with force = yes"
	echo "    local,path                path to the code. Code must be initializied"
	echo "                              and directory should already contain ./configure"
	echo "    system                    install system provided rpms"
	echo "    skip                      do nothing. code is installed already. don't touch it"
	echo " -a [prj,confi opts]:[prj..   add extra configure options."
	echo "                              prj: libqb kronosnet corosync"
	echo "                              configure opts are passed pristine to './configure \$conf_opts"
	echo "                              example: -a corosync,\"--enable-debug --enable-foo\":kronosnet,\"--enable-kronosnetd --enable-debug\""
	echo "                              note: shell escaping is important to identify options"
	echo " -b [prj,build opts]:[prj..   add extra build options."
	echo "                              prj: libqb kronosnet corosync"
	echo "                              build opts are passed pristine to 'make \$build_opts all install'"
	echo "                              note: shell escaping is important to identify options"
	echo " -e [interface],...           list of interfaces to use for testing (max 8)"
	echo "                              -e eth0,eth1,eth4"
	echo "                              udpu will only use the first interface. knet will use all"
	echo "                              tests assume that eth0 on node1 is configured on the same"
	echo "                              ipv4/ipv6 subnet of eth0 on the other nodes, etc."
	echo " -p path_to_testresults       location where to store test results."
	echo "                              Default: \$PWD/testresults/\$(date +%Y%m%d-%H%M%S)/"
	echo " -t [testlist]                comma separated list of tests to skip. Default: none"
	echo "                              Example: -t kronosnet (will only run corosync tests)"
	echo "                                       -t corosync (will only run kronosnet tests)"
	echo "                                       -t kronosnet,corosync (will skip both tests)"
}

function generate_ansible_cfg {
	echo "[defaults]" > ansible.cfg
	echo "callback_plugins = plugins/" >> ansible.cfg
	echo "inventory = ansible-inventory" >> ansible.cfg
	echo "generated ansible config:"
	echo "========================="
	cat ansible.cfg
	echo "========================="
	echo ""
}

function generate_inventory_file() {
	echo "[test-nodes]" > ansible-inventory
	echo "$knethosts" | sed -e 's/,/[1:/g' -e 's/$/]/g' >> ansible-inventory
	echo "generated ansible inventory:"
	echo "============================"
	cat ansible-inventory
	echo "============================"
	echo ""
}

function parse_src_opts {
	project="$1"
	shift
	args="$@"

	src="$(echo $args | awk -F ',' '{print $1}')"

	case "$src" in
		system)
			extravars="${project}src=system $extravars"
		;;
		skip)
			extravars="skip$project=yes $extravars"
		;;
		git)
			extravars="${project}src=git $extravars"
			repo="$(echo $args | awk -F ',' '{print $2}')"
			if [ -n "$repo" ]; then
				extravars="${project}gitrepo=$repo $extravars"
				version="$(echo $args | awk -F ',' '{print $3}')"
				if [ -n "$version" ]; then
					extravars="${project}gitver=$version $extravars"
				fi
			fi
		;;
		local)
			extravars="${project}src=local $extravars"
			localpath="$(echo $args | awk -F ',' '{print $2}')"
			if [ -z "$localpath" ]; then
				echo "Error: $project local option requires a path to the src code"
				exit 1
			fi
			extravars="${project}localpath=$localpath $extravars"
		;;
		*)
			echo "Unknown $src option for $project"
			exit 1
		;;
	esac

	return 0
}

function parse_build_opts {
	target=$1
	shift
	bopts=$@

	while [ -n "$bopts" ]; do
		curopt="$(echo "$bopts" | awk -F ":" '{print $1}')"
		project="$(echo "$curopt" | awk -F ',' '{print $1}')"
		opts="$(echo "$curopt" | awk -F ',' '{print $2}')"
		extravars="${project}${target}opt=\"${opts}\" $extravars"
		if echo "$bopts" | grep -q ":"; then
			bopts="$(echo "$bopts" | sed -e 's/.*://')"
		else
			bopts=""
		fi
	done

	return 0
}

function parse_test_opts {
	opts="$(echo $1 | sed -e 's/,/ /g')"
	for i in $opts; do
		extravars="skip${i}tests=yes $extravars"
	done
}

# parse command line options

testresdir="$PWD/testresults"

extravars=""

while getopts ":hi:swl:k:c:a:b:e:p:t:" optflag; do
	case "$optflag" in
	i)
		knethosts="$OPTARG"
		;;
	s)
		extravars="skipupdate=yes $extravars"
		;;
	w)
		extravars="wipecode=yes $extravars"
		;;
	l)
		parse_src_opts libqb "$OPTARG"
		;;
	k)
		parse_src_opts kronosnet "$OPTARG"
		;;
	c)
		parse_src_opts corosync "$OPTARG"
		;;
	a)
		parse_build_opts conf "$OPTARG"
		;;
	b)
		parse_build_opts build "$OPTARG"
		;;
	e)
		extravars="interfaces=$OPTARG $extravars"
		;;
	p)
		testresdir="$OPTARG"
		;;
	t)
		parse_test_opts "$OPTARG"
		;;
	h)
		print_usage
		exit 0
		;;
	\?|:)
		print_usage
		exit 1
		;;
	esac
done

if ! which ansible >/dev/null 2>&1; then
	echo "ERROR: missing ansible binary from PATH"
	exit 1
fi

if ! which ansible-playbook >/dev/null 2>&1; then
	echo "ERROR: missing ansible-playbook binary from PATH"
	exit 1
fi

# automatic update ansible-config
if [ -f ansible.cfg.manual ]; then
	cp ansible.cfg.manual ansible.cfg
else
	generate_ansible_cfg
fi

# generate and check ansible inventory file
if [ -n "$knethosts" ]; then
	generate_inventory_file
fi
if [ ! -f ansible-inventory ]; then
	echo "ERROR: missing ansible-inventory file"
	exit 1
fi

echo "Checking connectivity to nodes"
echo ""

ansible all -m ping || exit 1
echo ""

testresdir="${testresdir}/$(date +%Y%m%d-%H%M%S)"

mkdir -p "${testresdir}/corosync"
mkdir -p "${testresdir}/kronosnet"

ansible-playbook site.yml --extra-vars "$extravars testresdir=\"${testresdir}\""

exit 0
